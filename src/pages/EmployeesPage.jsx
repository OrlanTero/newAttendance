import React, { useState, useEffect } from "react";
import * as api from "../utils/api";
import Navbar from "../components/Navbar";
import {
  Box,
  Container,
  Typography,
  Paper,
  Button,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Avatar,
  Chip,
  InputAdornment,
  Grid,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress,
  Alert,
  Tooltip,
  FormHelperText,
  Divider,
  FormGroup,
  FormControlLabel,
  Switch,
  Card,
  CardContent,
  CardHeader,
} from "@mui/material";
import {
  Add as AddIcon,
  Search as SearchIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Close as CloseIcon,
  PhotoCamera as PhotoCameraIcon,
  Fingerprint as FingerprintIcon,
  Info as InfoIcon,
  Schedule as ScheduleIcon,
  Work as WorkIcon,
  AccessTime as AccessTimeIcon,
} from "@mui/icons-material";
import FingerprintScanner from "../components/FingerprintScanner";

const EmployeesPage = ({ user, onLogout }) => {
  const [employees, setEmployees] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [departmentMap, setDepartmentMap] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [openDialog, setOpenDialog] = useState(false);
  const [currentEmployee, setCurrentEmployee] = useState(null);
  const [formData, setFormData] = useState({
    unique_id: "",
    department_id: "",
    lastname: "",
    firstname: "",
    middlename: "",
    display_name: "",
    age: "",
    gender: "",
    biometric_data: "",
    image: null,
  });
  const [workSchedule, setWorkSchedule] = useState({
    monday: true,
    tuesday: true,
    wednesday: true,
    thursday: true,
    friday: true,
    saturday: false,
    sunday: false,
  });
  const [scheduleLoading, setScheduleLoading] = useState(false);
  const [previewImage, setPreviewImage] = useState(null);
  const [openFingerprintDialog, setOpenFingerprintDialog] = useState(false);
  const [autoGeneratedId, setAutoGeneratedId] = useState("");
  const [idEdited, setIdEdited] = useState(false);

  useEffect(() => {
    fetchEmployees();
    fetchDepartments();
  }, [searchTerm]);

  // Generate a unique employee ID
  const generateEmployeeId = () => {
    const prefix = "EMP";
    const timestamp = new Date().getTime().toString().slice(-6);
    const random = Math.floor(Math.random() * 900 + 100);
    return `${prefix}${timestamp}${random}`;
  };

  // Auto-generate unique_id when firstname or lastname changes
  useEffect(() => {
    if (!currentEmployee && !idEdited) {
      const newId = generateEmployeeId();
      setAutoGeneratedId(newId);
      setFormData((prev) => ({
        ...prev,
        unique_id: newId,
      }));
    }
  }, [formData.firstname, formData.lastname, currentEmployee, idEdited]);

  // Auto-generate display_name when firstname or lastname changes
  useEffect(() => {
    if (formData.firstname || formData.lastname) {
      const displayName = `${formData.firstname} ${formData.lastname}`.trim();
      setFormData((prev) => ({
        ...prev,
        display_name: displayName,
      }));
    }
  }, [formData.firstname, formData.lastname]);

  const fetchEmployees = async () => {
    try {
      setLoading(true);
      const result = await api.getEmployees(searchTerm);
      if (result.success) {
        setEmployees(result.data || []);
      } else {
        setError("Failed to fetch employees");
      }
    } catch (error) {
      console.error("Error fetching employees:", error);
      setError("Failed to fetch employees");
    } finally {
      setLoading(false);
    }
  };

  const fetchDepartments = async () => {
    try {
      const result = await api.getDepartments();

      if (Array.isArray(result)) {
        setDepartments(result);

        // Create a lookup map for department names by ID
        const depMap = {};
        result.forEach((dept) => {
          depMap[dept.department_id] = dept.name;
        });
        setDepartmentMap(depMap);
      }
    } catch (error) {
      console.error("Error fetching departments:", error);
    }
  };

  const fetchWorkSchedule = async (employeeId) => {
    if (!employeeId) return;

    try {
      setScheduleLoading(true);
      const result = await api.getEmployeeWorkSchedule(employeeId);

      if (result.success && result.data) {
        setWorkSchedule({
          monday: !!result.data.monday,
          tuesday: !!result.data.tuesday,
          wednesday: !!result.data.wednesday,
          thursday: !!result.data.thursday,
          friday: !!result.data.friday,
          saturday: !!result.data.saturday,
          sunday: !!result.data.sunday,
        });
      } else {
        // Set default schedule
        setWorkSchedule({
          monday: true,
          tuesday: true,
          wednesday: true,
          thursday: true,
          friday: true,
          saturday: false,
          sunday: false,
        });
      }
    } catch (error) {
      console.error("Error fetching work schedule:", error);
    } finally {
      setScheduleLoading(false);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    fetchEmployees();
  };

  const handleInputChange = (e) => {
    const { name, value, type, files } = e.target;

    if (type === "file") {
      const file = files[0];
      setFormData({
        ...formData,
        [name]: file,
      });

      if (file) {
        const reader = new FileReader();
        reader.onloadend = () => {
          setPreviewImage(reader.result);
        };
        reader.readAsDataURL(file);
      } else {
        setPreviewImage(null);
      }
    } else {
      setFormData({
        ...formData,
        [name]: value,
      });

      // Track if unique_id was manually edited
      if (name === "unique_id") {
        setIdEdited(value !== autoGeneratedId);
      }
    }
  };

  const handleWorkScheduleChange = (day) => (event) => {
    setWorkSchedule({
      ...workSchedule,
      [day]: event.target.checked,
    });
  };

  const resetForm = () => {
    setFormData({
      unique_id: "",
      department_id: "",
      lastname: "",
      firstname: "",
      middlename: "",
      display_name: "",
      age: "",
      gender: "",
      biometric_data: "",
      image: null,
    });
    setWorkSchedule({
      monday: true,
      tuesday: true,
      wednesday: true,
      thursday: true,
      friday: true,
      saturday: false,
      sunday: false,
    });
    setPreviewImage(null);
    setCurrentEmployee(null);
    setIdEdited(false);
    setAutoGeneratedId(generateEmployeeId());
  };

  const handleAddNew = () => {
    resetForm();
    // Generate a unique ID for new employees
    const newId = generateEmployeeId();
    setAutoGeneratedId(newId);
    setFormData((prev) => ({
      ...prev,
      unique_id: newId,
    }));
    setOpenDialog(true);
  };

  const handleEdit = async (employeeId) => {
    try {
      setLoading(true);
      const result = await api.getEmployee(employeeId);

      if (result.success && result.data) {
        const employee = result.data;
        setFormData({
          unique_id: employee.unique_id || "",
          department_id: employee.department_id || "",
          lastname: employee.lastname || "",
          firstname: employee.firstname || "",
          middlename: employee.middlename || "",
          display_name: employee.display_name || "",
          age: employee.age || "",
          gender: employee.gender || "",
          biometric_data: employee.biometric_data || "",
          image: null,
        });
        setCurrentEmployee(employee);
        setIdEdited(true); // Mark ID as edited for existing employees
        if (employee.image) {
          setPreviewImage(`/uploads/${employee.image.split("/").pop()}`);
        }

        // Fetch work schedule
        await fetchWorkSchedule(employee.employee_id);

        setOpenDialog(true);
      } else {
        setError("Failed to fetch employee details");
      }
    } catch (error) {
      console.error("Error fetching employee details:", error);
      setError("Failed to fetch employee details");
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (employeeId) => {
    if (!window.confirm("Are you sure you want to delete this employee?")) {
      return;
    }

    try {
      setLoading(true);
      const result = await api.deleteEmployee(employeeId);
      if (result.success) {
        fetchEmployees();
      } else {
        setError("Failed to delete employee");
      }
    } catch (error) {
      console.error("Error deleting employee:", error);
      setError("Failed to delete employee");
    } finally {
      setLoading(false);
    }
  };

  const saveWorkSchedule = async (employeeId) => {
    if (!employeeId) return;

    try {
      const result = await api.updateEmployeeWorkSchedule(
        employeeId,
        workSchedule
      );
      if (!result.success) {
        console.error("Failed to save work schedule:", result.message);
      }
    } catch (error) {
      console.error("Error saving work schedule:", error);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      setLoading(true);
      let result;

      if (currentEmployee) {
        result = await api.updateEmployee(
          currentEmployee.employee_id,
          formData
        );

        if (result.success) {
          // Save work schedule after employee update
          await saveWorkSchedule(currentEmployee.employee_id);
        }
      } else {
        result = await api.createEmployee(formData);

        if (result.success && result.data) {
          // Save work schedule after employee creation
          await saveWorkSchedule(result.data.employee_id);
        }
      }

      if (result.success) {
        resetForm();
        setOpenDialog(false);
        fetchEmployees();
      } else {
        setError(result.message || "Failed to save employee");
      }
    } catch (error) {
      console.error("Error saving employee:", error);
      setError("Failed to save employee");
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setOpenDialog(false);
    resetForm();
  };

  const handleFingerprintCapture = (biometricData) => {
    setFormData((prev) => ({
      ...prev,
      biometric_data: biometricData,
    }));
  };

  // Get department name by ID
  const getDepartmentName = (departmentId) => {
    return departmentMap[departmentId] || "Not Assigned";
  };

  // Get working days as a formatted string
  const getWorkingDays = (schedule) => {
    if (!schedule) return "Mon-Fri";

    const days = [];
    if (schedule.monday) days.push("Mon");
    if (schedule.tuesday) days.push("Tue");
    if (schedule.wednesday) days.push("Wed");
    if (schedule.thursday) days.push("Thu");
    if (schedule.friday) days.push("Fri");
    if (schedule.saturday) days.push("Sat");
    if (schedule.sunday) days.push("Sun");

    return days.join(", ") || "None";
  };

  // Get the count of working days
  const getWorkingDaysCount = () => {
    return Object.values(workSchedule).filter(Boolean).length;
  };

  return (
    <Box sx={{ minHeight: "100vh", bgcolor: "background.default", pt: 8 }}>
      <Navbar user={user} onLogout={onLogout} />

      <Container maxWidth="xl" sx={{ py: 4 }}>
        <Box sx={{ mb: 4 }}>
          <Typography variant="h4" sx={{ mb: 1, fontWeight: "bold" }}>
            Employees Management
          </Typography>
          <Typography variant="body1" color="text.secondary">
            Manage your employee records, add new employees, and update existing
            information.
          </Typography>
        </Box>

        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}

        <Paper sx={{ p: 3, mb: 3 }} elevation={0}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              mb: 3,
            }}
          >
            <form onSubmit={handleSearch} style={{ flex: 1, marginRight: 16 }}>
              <TextField
                fullWidth
                placeholder="Search employees..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon />
                    </InputAdornment>
                  ),
                }}
              />
            </form>
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={handleAddNew}
            >
              Add New Employee
            </Button>
          </Box>

          {loading ? (
            <Box
              sx={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                py: 8,
              }}
            >
              <CircularProgress />
            </Box>
          ) : employees.length === 0 ? (
            <Box
              sx={{
                textAlign: "center",
                py: 8,
                bgcolor: "background.default",
                borderRadius: 1,
              }}
            >
              <Typography variant="h6" color="text.secondary" gutterBottom>
                No employees found
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Add a new employee to get started
              </Typography>
            </Box>
          ) : (
            <TableContainer sx={{ maxHeight: "60vh", overflowY: "auto" }}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>ID</TableCell>
                    <TableCell>Photo</TableCell>
                    <TableCell>Name</TableCell>
                    <TableCell>Department</TableCell>
                    <TableCell>Gender</TableCell>
                    <TableCell>Age</TableCell>
                    <TableCell align="right">Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {employees.map((employee) => (
                    <TableRow key={employee.employee_id}>
                      <TableCell>{employee.unique_id}</TableCell>
                      <TableCell>
                        <Avatar
                          src={
                            employee.image
                              ? `/uploads/${employee.image.split("/").pop()}`
                              : undefined
                          }
                          alt={employee.display_name}
                        >
                          {employee.display_name?.[0]}
                        </Avatar>
                      </TableCell>
                      <TableCell>{employee.display_name}</TableCell>
                      <TableCell>
                        {employee.department_id ? (
                          <Chip
                            label={getDepartmentName(employee.department_id)}
                            size="small"
                            color="primary"
                            variant="outlined"
                          />
                        ) : (
                          <Chip
                            label="Not Assigned"
                            size="small"
                            variant="outlined"
                          />
                        )}
                      </TableCell>
                      <TableCell>{employee.gender || "N/A"}</TableCell>
                      <TableCell>{employee.age || "N/A"}</TableCell>
                      <TableCell align="right">
                        <IconButton
                          color="primary"
                          onClick={() => handleEdit(employee.employee_id)}
                          size="small"
                        >
                          <EditIcon />
                        </IconButton>
                        <IconButton
                          color="error"
                          onClick={() => handleDelete(employee.employee_id)}
                          size="small"
                        >
                          <DeleteIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </Paper>
      </Container>

      <Dialog
        open={openDialog}
        onClose={handleClose}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: { borderRadius: 2 },
        }}
      >
        <DialogTitle>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
            }}
          >
            <Typography variant="h6">
              {currentEmployee ? "Edit Employee" : "Add New Employee"}
            </Typography>
            <IconButton onClick={handleClose} size="small">
              <CloseIcon />
            </IconButton>
          </Box>
        </DialogTitle>
        <form onSubmit={handleSubmit}>
          <DialogContent dividers>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  required
                  label="Employee ID"
                  name="unique_id"
                  value={formData.unique_id}
                  onChange={handleInputChange}
                  InputProps={{
                    endAdornment: (
                      <InputAdornment position="end">
                        <Tooltip title="Auto-generated unique ID. You can edit it if needed.">
                          <InfoIcon fontSize="small" color="action" />
                        </Tooltip>
                      </InputAdornment>
                    ),
                  }}
                  helperText="Auto-generated unique identifier. Edit only if necessary."
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth required>
                  <InputLabel>Department</InputLabel>
                  <Select
                    name="department_id"
                    value={formData.department_id}
                    onChange={handleInputChange}
                    label="Department"
                  >
                    <MenuItem value="">
                      <em>Not Assigned</em>
                    </MenuItem>
                    {departments.map((dept) => (
                      <MenuItem
                        key={dept.department_id}
                        value={dept.department_id}
                      >
                        {dept.name}
                      </MenuItem>
                    ))}
                  </Select>
                  <FormHelperText>Select employee's department</FormHelperText>
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  required
                  label="Last Name"
                  name="lastname"
                  value={formData.lastname}
                  onChange={handleInputChange}
                />
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  required
                  label="First Name"
                  name="firstname"
                  value={formData.firstname}
                  onChange={handleInputChange}
                />
              </Grid>
              <Grid item xs={12} sm={4}>
                <TextField
                  fullWidth
                  label="Middle Name"
                  name="middlename"
                  value={formData.middlename}
                  onChange={handleInputChange}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  label="Display Name"
                  name="display_name"
                  value={formData.display_name}
                  onChange={handleInputChange}
                  helperText="Generated from first and last name if empty"
                  InputProps={{
                    endAdornment: (
                      <InputAdornment position="end">
                        <Tooltip title="Auto-generated from first and last name. Can be customized.">
                          <InfoIcon fontSize="small" color="action" />
                        </Tooltip>
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              <Grid item xs={12} sm={3}>
                <TextField
                  fullWidth
                  type="number"
                  label="Age"
                  name="age"
                  value={formData.age}
                  onChange={handleInputChange}
                  inputProps={{ min: 0 }}
                />
              </Grid>
              <Grid item xs={12} sm={3}>
                <FormControl fullWidth>
                  <InputLabel>Gender</InputLabel>
                  <Select
                    name="gender"
                    value={formData.gender}
                    onChange={handleInputChange}
                    label="Gender"
                  >
                    <MenuItem value="">Select Gender</MenuItem>
                    <MenuItem value="Male">Male</MenuItem>
                    <MenuItem value="Female">Female</MenuItem>
                    <MenuItem value="Other">Other</MenuItem>
                  </Select>
                </FormControl>
              </Grid>

              {/* Work Schedule Section */}
              <Grid item xs={12}>
                <Divider sx={{ my: 2 }}>
                  <Chip
                    icon={<ScheduleIcon />}
                    label="Work Schedule"
                    color="primary"
                  />
                </Divider>
              </Grid>

              <Grid item xs={12} md={6}>
                <Card elevation={0} variant="outlined">
                  <CardHeader
                    title="Working Days"
                    subheader={`${getWorkingDaysCount()} days selected`}
                    avatar={
                      <Avatar sx={{ bgcolor: "primary.main" }}>
                        <WorkIcon />
                      </Avatar>
                    }
                  />
                  <CardContent>
                    {scheduleLoading ? (
                      <Box sx={{ display: "flex", justifyContent: "center" }}>
                        <CircularProgress size={24} />
                      </Box>
                    ) : (
                      <FormGroup>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={workSchedule.monday}
                              onChange={handleWorkScheduleChange("monday")}
                              color="primary"
                            />
                          }
                          label="Monday"
                        />
                        <FormControlLabel
                          control={
                            <Switch
                              checked={workSchedule.tuesday}
                              onChange={handleWorkScheduleChange("tuesday")}
                              color="primary"
                            />
                          }
                          label="Tuesday"
                        />
                        <FormControlLabel
                          control={
                            <Switch
                              checked={workSchedule.wednesday}
                              onChange={handleWorkScheduleChange("wednesday")}
                              color="primary"
                            />
                          }
                          label="Wednesday"
                        />
                        <FormControlLabel
                          control={
                            <Switch
                              checked={workSchedule.thursday}
                              onChange={handleWorkScheduleChange("thursday")}
                              color="primary"
                            />
                          }
                          label="Thursday"
                        />
                        <FormControlLabel
                          control={
                            <Switch
                              checked={workSchedule.friday}
                              onChange={handleWorkScheduleChange("friday")}
                              color="primary"
                            />
                          }
                          label="Friday"
                        />
                        <FormControlLabel
                          control={
                            <Switch
                              checked={workSchedule.saturday}
                              onChange={handleWorkScheduleChange("saturday")}
                              color="primary"
                            />
                          }
                          label="Saturday"
                        />
                        <FormControlLabel
                          control={
                            <Switch
                              checked={workSchedule.sunday}
                              onChange={handleWorkScheduleChange("sunday")}
                              color="primary"
                            />
                          }
                          label="Sunday"
                        />
                      </FormGroup>
                    )}
                  </CardContent>
                </Card>
              </Grid>

              <Grid item xs={12} md={6}>
                <Card elevation={0} variant="outlined" sx={{ height: "100%" }}>
                  <CardHeader
                    title="Schedule Summary"
                    subheader="Working days configuration"
                    avatar={
                      <Avatar sx={{ bgcolor: "secondary.main" }}>
                        <AccessTimeIcon />
                      </Avatar>
                    }
                  />
                  <CardContent>
                    <Box sx={{ mb: 2 }}>
                      <Typography
                        variant="subtitle2"
                        color="text.secondary"
                        gutterBottom
                      >
                        Selected Working Days:
                      </Typography>
                      <Typography variant="body1">
                        <Chip
                          label={getWorkingDays(workSchedule)}
                          color="primary"
                          sx={{ fontWeight: "medium" }}
                        />
                      </Typography>
                    </Box>

                    <Box>
                      <Typography
                        variant="subtitle2"
                        color="text.secondary"
                        gutterBottom
                      >
                        Rest Days:
                      </Typography>
                      <Typography variant="body1">
                        {7 - getWorkingDaysCount()} day(s)
                      </Typography>
                    </Box>

                    <Box sx={{ mt: 3 }}>
                      <Typography variant="body2" color="text.secondary">
                        The employee will only be expected to work on the
                        selected days. Attendance will be tracked accordingly.
                      </Typography>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>

              <Grid item xs={12}>
                <Divider sx={{ my: 2 }} />
              </Grid>

              <Grid item xs={12}>
                <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
                  <Button
                    variant="outlined"
                    startIcon={<FingerprintIcon />}
                    onClick={() => setOpenFingerprintDialog(true)}
                  >
                    {formData.biometric_data
                      ? "Update Fingerprint"
                      : "Capture Fingerprint"}
                  </Button>
                  {formData.biometric_data && (
                    <Typography variant="body2" color="success.main">
                      Fingerprint data captured
                    </Typography>
                  )}
                </Box>
              </Grid>
              <Grid item xs={12}>
                <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                  <Typography variant="subtitle2">Employee Photo</Typography>
                  {previewImage ? (
                    <Box
                      sx={{
                        display: "flex",
                        flexDirection: "column",
                        alignItems: "flex-start",
                        gap: 1,
                      }}
                    >
                      <Box
                        component="img"
                        src={previewImage}
                        alt="Employee Preview"
                        sx={{
                          width: 120,
                          height: 120,
                          objectFit: "cover",
                          borderRadius: 1,
                          mb: 1,
                        }}
                      />
                      <Button
                        variant="outlined"
                        size="small"
                        onClick={() => {
                          setPreviewImage(null);
                          setFormData({ ...formData, image: null });
                        }}
                      >
                        Remove Image
                      </Button>
                    </Box>
                  ) : (
                    <Button
                      component="label"
                      variant="outlined"
                      startIcon={<PhotoCameraIcon />}
                    >
                      Choose Image
                      <input
                        type="file"
                        hidden
                        name="image"
                        onChange={handleInputChange}
                        accept="image/jpeg,image/png,image/jpg"
                      />
                    </Button>
                  )}
                  <Typography variant="caption" color="text.secondary">
                    Supported formats: JPG, JPEG, PNG
                  </Typography>
                </Box>
              </Grid>
            </Grid>
          </DialogContent>
          <DialogActions sx={{ p: 2.5 }}>
            <Button onClick={handleClose}>Cancel</Button>
            <Button
              type="submit"
              variant="contained"
              disabled={loading}
              startIcon={
                loading && <CircularProgress size={20} color="inherit" />
              }
            >
              {currentEmployee ? "Update" : "Save"}
            </Button>
          </DialogActions>
        </form>
      </Dialog>

      <FingerprintScanner
        open={openFingerprintDialog}
        onClose={() => setOpenFingerprintDialog(false)}
        onCapture={handleFingerprintCapture}
      />
    </Box>
  );
};

export default EmployeesPage;
